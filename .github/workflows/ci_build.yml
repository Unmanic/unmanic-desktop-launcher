name: Build and Release

on:
  push:
    branches: [ "dev-**", "pr-**", "staging", "master" ]
    paths-ignore:
      - ".github/**"
      - "!.github/workflows/**"
      - "*.md"
  pull_request:
    branches: [ staging, master ]

jobs:
  BuildWindows:
    runs-on: windows-latest
    steps:
      # Checkout the full history (required for GitVersion to work)
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install NSIS
      - name: Install NSIS
        run: choco install nsis -y
      - name: Print NSIS version
        run: makensis -VERSION
      - name: Print NSIS compile flags
        run: makensis -HDRINFO

      # Install libsqlite3
      - name: install sqlite
        run: choco install sqlite

      # Install Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.7
      - name: Display Python version
        run: python --version

      # Restore build dependencies cache
      - name: Restore build dependencies cache
        uses: actions/cache@v3
        with:
          path: build/dependencies
          key: ${{ runner.os }}-build-dependencies-win-${{ hashFiles('build\dependencies\**') }}
          restore-keys: |
            ${{ runner.os }}-build-dependencies-win-

      # Install build local dependencies
      - name: Install build dependencies
        shell: pwsh
        run: |
          .\scripts\install-tools.ps1

      # Execute project build script
      - name: Build
        id: build-step
        shell: pwsh
        run: |
          .\scripts\build.ps1
          $semVer = build\tools\gitversion\gitversion.exe /showvariable SemVer
          New-Item $projectPath\dist -ItemType Directory
          Move-Item -Path build\nsis\UnmanicLauncher*.exe -Destination $projectPath\dist
          Out-File -FilePath dist\VERSION.txt -InputObject $semVer
          Write-Output "::set-output name=BUILD_VERSION::$semVer"

      # Publish artifacts built in this pipeline
      - uses: actions/upload-artifact@v3
        with:
          name: UnmanicLauncher-Windows
          path: dist/

  BuildAppImage:
    runs-on: ubuntu-20.04
    steps:
      # Checkout the full history (required for GitVersion to work)
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          # Build AppImage with Python 3.8 (same as the output will be)
          python-version: 3.8
      - name: Display Python version
        run: python --version

      # Restore build dependencies cache
      - name: Restore build dependencies cache
        uses: actions/cache@v3
        with:
          path: build/dependencies
          key: ${{ runner.os }}-build-dependencies-lin-${{ hashFiles('build/dependencies/**') }}
          restore-keys: |
            ${{ runner.os }}-build-dependencies-lin-

      # Install build local dependencies
      - name: Install build dependencies
        run: |
          ./scripts/install-tools-linux.sh
          sudo apt-get install -y pkg-config libcairo2-dev gcc python3-dev libgirepository1.0-dev

      # Execute project build script
      - name: Build
        id: build-step
        run: |
          ./scripts/build-linux.sh
          semVer=$(build/tools/gitversion/gitversion /showvariable FullSemVer)
          if [[ ${GITHUB_REF#refs/*/} == 'master' ]]; then
            semVer=$(build/tools/gitversion/gitversion /showvariable SemVer)
          fi
          mkdir -p dist
          mv -v build/UnmanicLauncher-x86_64.AppImage dist/UnmanicLauncher-${semVer}-x86_64.AppImage
          echo "${semVer}" > dist/VERSION.txt
          echo "::set-output name=BUILD_VERSION::${semVer}"

      # Publish artifacts built in this pipeline
      - uses: actions/upload-artifact@v3
        with:
          name: UnmanicLauncher-AppImages
          path: dist/

  Release:
    needs: [ BuildWindows, BuildAppImage ]
    runs-on: ubuntu-latest
    # TODO: Limit to master only
    #if: github.ref == 'refs/heads/master'
    steps:
      # Fetch Windows artifacts
      - name: Download AppImage Artifacts
        uses: actions/download-artifact@v2
        with:
          name: UnmanicLauncher-Windows
          path: ./windows/
      # Fetch AppImage artifacts
      - name: Download AppImage Artifacts
        uses: actions/download-artifact@v2
        with:
          name: UnmanicLauncher-AppImages
          path: ./appimages/

      # Restore package dist data
      - name: Restore package dist data
        id: dist-data-step
        run: |
          mkdir -p ./dist
          find ./windows/ -type f -name "*.exe" -exec cp -fn {} ./dist/ \;
          find ./windows/ -type f -name "VERSION.txt" -exec cp -fn {} ./dist/ \;
          find ./appimages/ -type f -name "*.AppImage" -exec cp -fn {} ./dist/ \;
          find ./appimages/ -type f -name "VERSION.txt" -exec cp -fn {} ./dist/ \;
          ls -l ./dist/
          semVer=$(cat ./dist/VERSION.txt)
          echo "::set-output name=BUILD_VERSION::${semVer}"

      - name: Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          automatic_release_tag: v${{ steps.dist-data-step.outputs.BUILD_VERSION }}
          title: Release v${{ steps.dist-data-step.outputs.BUILD_VERSION }}
          files: |
            dist/*.AppImage
          repo_token: ${{ secrets.GITHUB_TOKEN }}
